Fixing CSRF:

So the basic problem here is that there is no check to see if the current 
user is making any malicious claims. This can be solved using a token. On lines
4 and 5 where we check if the current user is loggedin and begin to check
the operation that needs to take place, we can add a token. This way everytime
someone logs on, we verify their token to see if it really is them. Now the
reason we need one for operation is because a hacker can manipulate the
page source into making an entry for someone else. If that is the case, checking
for token during any given operation request will make sure that current user
and the one making the entry the same people. To be more explicit, we can add
something along the lines of:

<input type="hidden" name="token1" value="secret" />

into <html>

Fixing XSS:

For cross-site-scripting issues, we can whitelist our input from the user. We
can do this by using the function htmlspecialchars(). This function asks for
three parameters: the string we're checking from user, flags specifying what
you want converted, and charset. In our case, we can have something like:
htmlspecialchars($operation, ENT_QUOTES, 'UTF-8'); where $operation is the 
user input, ENT-QUOTES means it'll convert both double and single quotes,
and 'UTF-8' is ASCII compatible multi-byte 8-bit Unicode. By adding this, we
will be protected by outputting untrusted data. We can also use strip_tags()
to sanitize any HTML from input. That is, we send $operation into the function
and then display it on the site.

Fixing SQL Injection: $escaped = pg_escape_string($data);

In order to fix the SQL Injection issue, we can use the function pg_escape_string().
This removes any query based commands. So when we ask for username and password
(on lines 16-17), we can use the function on $user and $password and then put it
into $query so that the user cannot enter queries as input. Same goes for entering
expressions after login for the $operation variable. We can also use prepared statements
through the PDO() function. So around line 16, we'd have something like:
$pdo=new PDO(postgresql:host=localhost;dbname=fourfours;user=ff;password=adg135sfh246);
then our $query that is already present
$ppdo=$pdo->prepare($query);
$ppdo->bindParam($username);
$ppdo->bindParam($password);
$ppdo->execute();

The above solutions will prevent any sql injection.

Fixing Sensitive Data Exposure:s

The fix for this is quite simple. Our main problem here is that when a hacker gets hold of
passwords, they can just see. They are not decrypted in any way. To prevent this, we simply
need to hash the passwords (password_hash()) as we enter them into the database and then verify if needed using
the function using password_verify(). Something like this:
$hashAndSalt= password_hash($password, PASSWORD_BCRYPT);
and then store $hashAndSalt
PASSWORD_BCRYPT is just hashing algorithm.
Also, changing http to https makes sure that the user's communication with the website is encrypted. That being said,
we can check at the start of the code if https is on, then make our header that with something like this:
if($_SERVER["HTTPS"] != "on")
{
    header("Location: https://" . $_SERVER["HTTP_HOST"] . $_SERVER["REQUEST_URI"]);
    exit();
}

Fixing Session Fixation:

Cookie stealing is quite easy for this application and the fact that the same cookie is used
after the user changes helps a lot. To fix this, we can use the function session_regenerate_id()
which will create a new cookie every time a user logs in. Note that we need to make sure the session
to replace successfully saves using session_commit().
